// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trace.Application;

#nullable disable

namespace Trace.Infrastructure.Migrations
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20240113024654_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Asset.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_asset");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_asset_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_asset_deleted_at");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Asset.AssetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_asset_category");

                    b.ToTable("asset_category", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Contact.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<Guid?>("ExtraInformationId")
                        .HasColumnType("uuid")
                        .HasColumnName("extra_information_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset?>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_contact");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_contact_deleted_at");

                    b.HasIndex("ExtraInformationId")
                        .HasDatabaseName("ix_contact_extra_information_id");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Contact.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lead");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_lead_contact_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_lead_deleted_at");

                    b.ToTable("lead", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Core.ContactObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressCity")
                        .HasColumnType("text")
                        .HasColumnName("address_city");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("text")
                        .HasColumnName("address_country");

                    b.Property<string>("AddressCounty")
                        .HasColumnType("text")
                        .HasColumnName("address_county");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("AddressState")
                        .HasColumnType("text")
                        .HasColumnName("address_state");

                    b.Property<string>("AddressZip")
                        .HasColumnType("text")
                        .HasColumnName("address_zip");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("GuarantorEmail")
                        .HasColumnType("text")
                        .HasColumnName("guarantor_email");

                    b.Property<string>("GuarantorName")
                        .HasColumnType("text")
                        .HasColumnName("guarantor_name");

                    b.Property<string>("GuarantorPhone")
                        .HasColumnType("text")
                        .HasColumnName("guarantor_phone");

                    b.Property<string>("HomePhone")
                        .HasColumnType("text")
                        .HasColumnName("home_phone");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("NextKinEmail")
                        .HasColumnType("text")
                        .HasColumnName("next_kin_email");

                    b.Property<string>("NextKinName")
                        .HasColumnType("text")
                        .HasColumnName("next_kin_name");

                    b.Property<string>("NextKinPhone")
                        .HasColumnType("text")
                        .HasColumnName("next_kin_phone");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_children");

                    b.HasKey("Id")
                        .HasName("pk_contact_object");

                    b.ToTable("contact_object", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Device.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<DateTimeOffset?>("LastMoved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_moved");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<int>("SpeedLimit")
                        .HasColumnType("integer")
                        .HasColumnName("speed_limit");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unique_id");

                    b.HasKey("Id")
                        .HasName("pk_device");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Device.DeviceCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<int>("Delay")
                        .HasColumnType("integer")
                        .HasColumnName("delay");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messages");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_device_command");

                    b.ToTable("device_command", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Device.DevicePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision")
                        .HasColumnName("altitude");

                    b.Property<double?>("Battery")
                        .HasColumnType("double precision")
                        .HasColumnName("battery");

                    b.Property<bool>("Charging")
                        .HasColumnType("boolean")
                        .HasColumnName("charging");

                    b.Property<double>("Course")
                        .HasColumnType("double precision")
                        .HasColumnName("course");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double?>("Fuel")
                        .HasColumnType("double precision")
                        .HasColumnName("fuel");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<Guid[]>("LocationIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("location_ids");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<double>("Odometer")
                        .HasColumnType("double precision")
                        .HasColumnName("odometer");

                    b.Property<int>("Satellites")
                        .HasColumnType("integer")
                        .HasColumnName("satellites");

                    b.Property<DateTimeOffset>("ServerTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_time");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision")
                        .HasColumnName("speed");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_device_position");

                    b.ToTable("device_position", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Events.Events", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<DateTimeOffset>("ServerTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_time");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.AccountMapOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("AutoInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_invoice");

                    b.Property<bool>("AutoOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_order");

                    b.Property<bool>("AutoRoute")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_route");

                    b.Property<bool>("AutoRouteCost")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_route_cost");

                    b.Property<bool>("AutoZoneOtp")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_zone_otp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("EnableTrip")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_trip");

                    b.Property<string>("MapType")
                        .HasColumnType("text")
                        .HasColumnName("map_type");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("VerifyOtp")
                        .HasColumnType("boolean")
                        .HasColumnName("verify_otp");

                    b.Property<int?>("Zoom")
                        .HasColumnType("integer")
                        .HasColumnName("zoom");

                    b.Property<int?>("ZoomSelection")
                        .HasColumnType("integer")
                        .HasColumnName("zoom_selection");

                    b.HasKey("Id")
                        .HasName("pk_account_map_option");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_account_map_option_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_account_map_option_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_account_map_option_user_id");

                    b.ToTable("account_map_option", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.AccountNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("Schedule")
                        .HasColumnType("boolean")
                        .HasColumnName("schedule");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int[]>("Types")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("types");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_account_notification");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_account_notification_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_account_notification_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_account_notification_user_id");

                    b.ToTable("account_notification", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.AccountSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("Hour24Time")
                        .HasColumnType("boolean")
                        .HasColumnName("hour24time");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UnitArea")
                        .HasColumnType("text")
                        .HasColumnName("unit_area");

                    b.Property<string>("UnitDistance")
                        .HasColumnType("text")
                        .HasColumnName("unit_distance");

                    b.Property<string>("UnitForce")
                        .HasColumnType("text")
                        .HasColumnName("unit_force");

                    b.Property<string>("UnitPower")
                        .HasColumnType("text")
                        .HasColumnName("unit_power");

                    b.Property<string>("UnitPressure")
                        .HasColumnType("text")
                        .HasColumnName("unit_pressure");

                    b.Property<string>("UnitSpeed")
                        .HasColumnType("text")
                        .HasColumnName("unit_speed");

                    b.Property<string>("UnitTemperature")
                        .HasColumnType("text")
                        .HasColumnName("unit_temperature");

                    b.Property<string>("UnitVolume")
                        .HasColumnType("text")
                        .HasColumnName("unit_volume");

                    b.Property<string>("UnitWeight")
                        .HasColumnType("text")
                        .HasColumnName("unit_weight");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_account_settings");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_account_settings_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_account_settings_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_account_settings_user_id");

                    b.ToTable("account_settings", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<int>("DefaultRole")
                        .HasColumnType("integer")
                        .HasColumnName("default_role");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_asp_net_users_contact_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_asp_net_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_users_role_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_asp_net_users_tenant_id");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_asp_net_users_user_name");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.UserPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Feature")
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<string>("Module")
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.ComplexProperty<Dictionary<string, object>>("Actions", "Trace.Application.Identity.UserPermissions.Actions#CrudAction", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Create")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_create");

                            b1.Property<bool>("Delete")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_delete");

                            b1.Property<bool>("Read")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_read");

                            b1.Property<bool>("Update")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_update");
                        });

                    b.HasKey("Id")
                        .HasName("pk_user_permissions");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_permissions_deleted_at");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_permissions_role_id");

                    b.ToTable("user_permissions", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<int>("Root")
                        .HasColumnType("integer")
                        .HasColumnName("root");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text")
                        .HasColumnName("approved_by");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_location_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_location_deleted_at");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Location.LocationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_location_category");

                    b.ToTable("location_category", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Routes.Routes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<int?>("CompletedRate")
                        .HasColumnType("integer")
                        .HasColumnName("completed_rate");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Point>("Destination")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("destination");

                    b.Property<LineString>("Path")
                        .HasColumnType("geometry")
                        .HasColumnName("path");

                    b.Property<decimal>("RestDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("rest_duration");

                    b.Property<Point>("Source")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("source");

                    b.Property<int?>("SpeedLimit")
                        .HasColumnType("integer")
                        .HasColumnName("speed_limit");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<decimal>("ToleranceDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("tolerance_duration");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_routes_deleted_at");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tags.TagMembers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tag_members");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tag_members_deleted_at");

                    b.ToTable("tag_members", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tags.Tags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("RoutesId")
                        .HasColumnType("uuid")
                        .HasColumnName("routes_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_tags_contact_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tags_deleted_at");

                    b.HasIndex("LeadId")
                        .HasDatabaseName("ix_tags_lead_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_tags_location_id");

                    b.HasIndex("RoutesId")
                        .HasDatabaseName("ix_tags_routes_id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("AddressCity")
                        .HasColumnType("text")
                        .HasColumnName("address_city");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("text")
                        .HasColumnName("address_country");

                    b.Property<string>("AddressCounty")
                        .HasColumnType("text")
                        .HasColumnName("address_county");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("AddressState")
                        .HasColumnType("text")
                        .HasColumnName("address_state");

                    b.Property<string>("AddressZip")
                        .HasColumnType("text")
                        .HasColumnName("address_zip");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HomePhone")
                        .HasColumnType("text")
                        .HasColumnName("home_phone");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_branch");

                    b.ToTable("tenant_branch", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantDomains", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<DateTimeOffset>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("Registrar")
                        .HasColumnType("text")
                        .HasColumnName("registrar");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tenant_domains");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tenant_domains_deleted_at");

                    b.HasIndex("Domain")
                        .HasDatabaseName("ix_tenant_domains_domain");

                    b.HasIndex("Expiry")
                        .HasDatabaseName("ix_tenant_domains_expiry");

                    b.ToTable("tenant_domains", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantMapOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("AutoInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_invoice");

                    b.Property<bool>("AutoOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_order");

                    b.Property<bool>("AutoRoute")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_route");

                    b.Property<bool>("AutoRouteCost")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_route_cost");

                    b.Property<bool>("AutoZoneOtp")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_zone_otp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("EnableTrip")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_trip");

                    b.Property<string>("MapType")
                        .HasColumnType("text")
                        .HasColumnName("map_type");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<bool>("VerifyOtp")
                        .HasColumnType("boolean")
                        .HasColumnName("verify_otp");

                    b.Property<int?>("Zoom")
                        .HasColumnType("integer")
                        .HasColumnName("zoom");

                    b.Property<int?>("ZoomSelection")
                        .HasColumnType("integer")
                        .HasColumnName("zoom_selection");

                    b.HasKey("Id")
                        .HasName("pk_tenant_map_option");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tenant_map_option_deleted_at");

                    b.ToTable("tenant_map_option", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("Hour24Time")
                        .HasColumnType("boolean")
                        .HasColumnName("hour24time");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UnitArea")
                        .HasColumnType("text")
                        .HasColumnName("unit_area");

                    b.Property<string>("UnitDistance")
                        .HasColumnType("text")
                        .HasColumnName("unit_distance");

                    b.Property<string>("UnitForce")
                        .HasColumnType("text")
                        .HasColumnName("unit_force");

                    b.Property<string>("UnitPower")
                        .HasColumnType("text")
                        .HasColumnName("unit_power");

                    b.Property<string>("UnitPressure")
                        .HasColumnType("text")
                        .HasColumnName("unit_pressure");

                    b.Property<string>("UnitSpeed")
                        .HasColumnType("text")
                        .HasColumnName("unit_speed");

                    b.Property<string>("UnitTemperature")
                        .HasColumnType("text")
                        .HasColumnName("unit_temperature");

                    b.Property<string>("UnitVolume")
                        .HasColumnType("text")
                        .HasColumnName("unit_volume");

                    b.Property<string>("UnitWeight")
                        .HasColumnType("text")
                        .HasColumnName("unit_weight");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tenant_settings");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tenant_settings_deleted_at");

                    b.ToTable("tenant_settings", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.Tenants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("UniqueId")
                        .HasColumnType("integer")
                        .HasColumnName("unique_id");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("UniqueId")
                        .HasDatabaseName("ix_tenants_unique_id");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Trailer.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<string>("FleetIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("fleet_identifier");

                    b.Property<int>("HorsePower")
                        .HasColumnType("integer")
                        .HasColumnName("horse_power");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<long>("Odometer")
                        .HasColumnType("bigint")
                        .HasColumnName("odometer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<decimal>("WeightCapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("weight_capacity");

                    b.HasKey("Id")
                        .HasName("pk_trailer");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_trailer_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_trailer_deleted_at");

                    b.ToTable("trailer", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Vehicle.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<string>("FleetIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fleet_identifier");

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_capacity");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_type");

                    b.Property<int>("HorsePower")
                        .HasColumnType("integer")
                        .HasColumnName("horse_power");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Odometer")
                        .HasColumnType("bigint")
                        .HasColumnName("odometer");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("text")
                        .HasColumnName("registration_no");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trailer_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<decimal>("WeightCapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("weight_capacity");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_vehicle_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_vehicle_deleted_at");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Trace.Application.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Trace.Application.Asset.Asset", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_asset_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Contact.Contact", b =>
                {
                    b.HasOne("Trace.Application.Core.ContactObject", "ExtraInformation")
                        .WithMany()
                        .HasForeignKey("ExtraInformationId")
                        .HasConstraintName("fk_contact_contact_object_extra_information_id");

                    b.Navigation("ExtraInformation");
                });

            modelBuilder.Entity("Trace.Application.Contact.Lead", b =>
                {
                    b.HasOne("Trace.Application.Contact.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_lead_contact_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Trace.Application.Identity.UserAccount", b =>
                {
                    b.HasOne("Trace.Application.Contact.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_asp_net_users_contact_contact_id");

                    b.HasOne("Trace.Application.Identity.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_users_user_role_role_id");

                    b.Navigation("Contact");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trace.Application.Identity.UserPermissions", b =>
                {
                    b.HasOne("Trace.Application.Identity.UserRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_permissions_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.HasOne("Trace.Application.Location.LocationCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_location_location_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Tags.Tags", b =>
                {
                    b.HasOne("Trace.Application.Contact.Contact", null)
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_tags_contact_contact_id");

                    b.HasOne("Trace.Application.Contact.Lead", null)
                        .WithMany("Tags")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("fk_tags_lead_lead_id");

                    b.HasOne("Trace.Application.Location.Location", null)
                        .WithMany("Tags")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_tags_location_location_id");

                    b.HasOne("Trace.Application.Routes.Routes", null)
                        .WithMany("Tags")
                        .HasForeignKey("RoutesId")
                        .HasConstraintName("fk_tags_routes_routes_id");
                });

            modelBuilder.Entity("Trace.Application.Trailer.Trailer", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trailer_asset_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Vehicle.Vehicle", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_asset_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Contact.Contact", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Contact.Lead", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Identity.UserRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Routes.Routes", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
